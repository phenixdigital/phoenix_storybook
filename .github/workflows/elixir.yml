name: Elixir CI

on: 
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-22.04

    env:
      MIX_ENV: test

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        id: beam
        with:
          otp-version: "27.0"
          elixir-version: "1.17.0-otp-27"

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-mix-

      - name: Restore PLT cache
        id: plt_cache
        uses: actions/cache/restore@v3
        with:
          path: .plts
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
          

      - name: Install dependencies
        run: mix deps.get

      - name: Compilation
        run: mix compile --warnings-as-errors

      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        with:
          path: .plts
          key: |
            plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
            

      - name: Check formatting
        run: mix format --check-formatted

      - name: Credo
        run: mix credo

      - name: Dialyzer
        run: mix dialyzer --format github

      - name: Run tests
        run: mix coveralls.json --warnings-as-errors --all-warnings

      - uses: codecov/codecov-action@v4
        with: 
          fail_ci_if_error: true
          files: coverage/excoveralls.json
          token: ${{ secrets.CODECOV_TOKEN }}


